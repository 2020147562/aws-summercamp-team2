{"filter":false,"title":"lambda_function.py","tooltip":"/serverless/team2-data-handling-lambda/lambda_function.py","undoManager":{"mark":16,"position":16,"stack":[[{"start":{"row":0,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["import boto3","import json","","def lambda_handler(event, context):","    # 전달된 데이터","    received_data = event['body']","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'NextLambdaFunctionName'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 호출","    response = lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='RequestResponse',  # 대기하면서 응답을 받을 경우","        Payload=json.dumps({","            \"body\": received_data","        })","    )","    ","    # 다음 Lambda 함수의 응답 처리","    response_payload = json.loads(response['Payload'].read().decode())","    ","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function',","            'response_from_next_function': response_payload","        })","    }",""],"id":15}],[{"start":{"row":11,"column":35},"end":{"row":11,"column":57},"action":"remove","lines":["NextLambdaFunctionName"],"id":16}],[{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"insert","lines":["t"],"id":17},{"start":{"row":11,"column":36},"end":{"row":11,"column":37},"action":"insert","lines":["e"]},{"start":{"row":11,"column":37},"end":{"row":11,"column":38},"action":"insert","lines":["a"]},{"start":{"row":11,"column":38},"end":{"row":11,"column":39},"action":"insert","lines":["m"]},{"start":{"row":11,"column":39},"end":{"row":11,"column":40},"action":"insert","lines":["2"]},{"start":{"row":11,"column":40},"end":{"row":11,"column":41},"action":"insert","lines":["-"]},{"start":{"row":11,"column":41},"end":{"row":11,"column":42},"action":"insert","lines":["D"]},{"start":{"row":11,"column":42},"end":{"row":11,"column":43},"action":"insert","lines":["B"]}],[{"start":{"row":11,"column":43},"end":{"row":11,"column":44},"action":"insert","lines":["-"],"id":18},{"start":{"row":11,"column":44},"end":{"row":11,"column":45},"action":"insert","lines":["m"]},{"start":{"row":11,"column":45},"end":{"row":11,"column":46},"action":"insert","lines":["a"]},{"start":{"row":11,"column":46},"end":{"row":11,"column":47},"action":"insert","lines":["n"]},{"start":{"row":11,"column":47},"end":{"row":11,"column":48},"action":"insert","lines":["a"]}],[{"start":{"row":11,"column":48},"end":{"row":11,"column":49},"action":"insert","lines":["g"],"id":19},{"start":{"row":11,"column":49},"end":{"row":11,"column":50},"action":"insert","lines":["e"]},{"start":{"row":11,"column":50},"end":{"row":11,"column":51},"action":"insert","lines":["m"]},{"start":{"row":11,"column":51},"end":{"row":11,"column":52},"action":"insert","lines":["e"]},{"start":{"row":11,"column":52},"end":{"row":11,"column":53},"action":"insert","lines":["n"]},{"start":{"row":11,"column":53},"end":{"row":11,"column":54},"action":"insert","lines":["t"]},{"start":{"row":11,"column":54},"end":{"row":11,"column":55},"action":"insert","lines":["-"]},{"start":{"row":11,"column":55},"end":{"row":11,"column":56},"action":"insert","lines":["l"]},{"start":{"row":11,"column":56},"end":{"row":11,"column":57},"action":"insert","lines":["a"]},{"start":{"row":11,"column":57},"end":{"row":11,"column":58},"action":"insert","lines":["m"]}],[{"start":{"row":11,"column":58},"end":{"row":11,"column":59},"action":"insert","lines":["b"],"id":20},{"start":{"row":11,"column":59},"end":{"row":11,"column":60},"action":"insert","lines":["d"]},{"start":{"row":11,"column":60},"end":{"row":11,"column":61},"action":"insert","lines":["a"]}],[{"start":{"row":0,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["import boto3","import json","","def lambda_handler(event, context):","    # 전달된 데이터","    received_data = event['body']","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 호출","    response = lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='RequestResponse',  # 대기하면서 응답을 받을 경우","        Payload=json.dumps({","            \"body\": received_data","        })","    )","    ","    # 다음 Lambda 함수의 응답 처리","    response_payload = json.loads(response['Payload'].read().decode())","    ","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function',","            'response_from_next_function': response_payload","        })","    }",""],"id":21},{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["import boto3","import json","import base64","import cgi","import io","","def lambda_handler(event, context):","    # Base64로 인코딩된 경우 디코딩","    if event.get('isBase64Encoded'):","        body = base64.b64decode(event['body'])","    else:","        body = event['body'].encode('utf-8')","    ","    # Content-Type 헤더에서 boundary 값을 포함하여 가져옴","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # environ를 구성하여 cgi.FieldStorage를 사용해 파싱","    environ = {","        'REQUEST_METHOD': 'POST',","        'CONTENT_TYPE': content_type,","        'CONTENT_LENGTH': str(len(body))","    }","    ","    # multipart/form-data 파싱","    form_data = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","    ","    # 이미지와 코멘트 추출","    image = form_data['image']","    comment = form_data['comment'].value","    ","    # metadata 구조 생성","    metadata = {","        \"comment\": comment,","        # 필요한 다른 메타데이터를 여기에 추가할 수 있습니다.","    }","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 호출","    response = lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='RequestResponse',","        Payload=json.dumps({","            \"image\": image.file.read().decode('latin1'),  # 이미지 바이너리 데이터를 텍스트로 변환하여 전달","            \"metadata\": metadata","        })","    )","    ","    # 다음 Lambda 함수의 응답 처리","    response_payload = json.loads(response['Payload'].read().decode())","    ","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function',","            'response_from_next_function': response_payload","        })","    }",""]}],[{"start":{"row":32,"column":27},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":22},{"start":{"row":33,"column":0},"end":{"row":33,"column":8},"action":"insert","lines":["        "]},{"start":{"row":33,"column":8},"end":{"row":33,"column":9},"action":"insert","lines":["#"]}],[{"start":{"row":33,"column":9},"end":{"row":33,"column":10},"action":"insert","lines":[" "],"id":23},{"start":{"row":33,"column":10},"end":{"row":33,"column":11},"action":"insert","lines":[" "]},{"start":{"row":33,"column":11},"end":{"row":33,"column":12},"action":"insert","lines":["d"]}],[{"start":{"row":33,"column":11},"end":{"row":33,"column":12},"action":"remove","lines":["d"],"id":24},{"start":{"row":33,"column":10},"end":{"row":33,"column":11},"action":"remove","lines":[" "]}],[{"start":{"row":33,"column":10},"end":{"row":33,"column":11},"action":"insert","lines":["위"],"id":25},{"start":{"row":33,"column":11},"end":{"row":33,"column":12},"action":"insert","lines":["치"]},{"start":{"row":33,"column":12},"end":{"row":33,"column":13},"action":"insert","lines":["데"]},{"start":{"row":33,"column":13},"end":{"row":33,"column":14},"action":"insert","lines":["이"]},{"start":{"row":33,"column":14},"end":{"row":33,"column":15},"action":"insert","lines":["터"]},{"start":{"row":33,"column":15},"end":{"row":33,"column":16},"action":"insert","lines":[" "]},{"start":{"row":33,"column":16},"end":{"row":33,"column":17},"action":"insert","lines":["반"]},{"start":{"row":33,"column":17},"end":{"row":33,"column":18},"action":"insert","lines":["드"]},{"start":{"row":33,"column":18},"end":{"row":33,"column":19},"action":"insert","lines":["시"]},{"start":{"row":33,"column":19},"end":{"row":33,"column":20},"action":"insert","lines":[" "]},{"start":{"row":33,"column":20},"end":{"row":33,"column":21},"action":"insert","lines":["추"]},{"start":{"row":33,"column":21},"end":{"row":33,"column":22},"action":"insert","lines":["가"]},{"start":{"row":33,"column":22},"end":{"row":33,"column":23},"action":"insert","lines":["가"]}],[{"start":{"row":25,"column":4},"end":{"row":26,"column":0},"action":"insert","lines":["",""],"id":26},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":26,"column":4},"end":{"row":30,"column":91},"action":"insert","lines":["# form_data 내용 확인","    print(\"form_data keys:\", list(form_data.keys()))  # form_data에 포함된 키들 출력","    for key in form_data.keys():","        item = form_data[key]","        print(f\"Key: {key}, Value: {item.value if item.filename is None else 'File data'}\")"],"id":27}],[{"start":{"row":30,"column":91},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":28},{"start":{"row":31,"column":0},"end":{"row":31,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"remove","lines":["import boto3","import json","import base64","import cgi","import io","","def lambda_handler(event, context):","    # Base64로 인코딩된 경우 디코딩","    if event.get('isBase64Encoded'):","        body = base64.b64decode(event['body'])","    else:","        body = event['body'].encode('utf-8')","    ","    # Content-Type 헤더에서 boundary 값을 포함하여 가져옴","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # environ를 구성하여 cgi.FieldStorage를 사용해 파싱","    environ = {","        'REQUEST_METHOD': 'POST',","        'CONTENT_TYPE': content_type,","        'CONTENT_LENGTH': str(len(body))","    }","    ","    # multipart/form-data 파싱","    form_data = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","    ","    # form_data 내용 확인","    print(\"form_data keys:\", list(form_data.keys()))  # form_data에 포함된 키들 출력","    for key in form_data.keys():","        item = form_data[key]","        print(f\"Key: {key}, Value: {item.value if item.filename is None else 'File data'}\")","        ","    # 이미지와 코멘트 추출","    image = form_data['image']","    comment = form_data['comment'].value","    ","    # metadata 구조 생성","    metadata = {","        \"comment\": comment,","        # 위치데이터 반드시 추가가","        # 필요한 다른 메타데이터를 여기에 추가할 수 있습니다.","    }","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 호출","    response = lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='RequestResponse',","        Payload=json.dumps({","            \"image\": image.file.read().decode('latin1'),  # 이미지 바이너리 데이터를 텍스트로 변환하여 전달","            \"metadata\": metadata","        })","    )","    ","    # 다음 Lambda 함수의 응답 처리","    response_payload = json.loads(response['Payload'].read().decode())","    ","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function',","            'response_from_next_function': response_payload","        })","    }",""],"id":30},{"start":{"row":0,"column":0},"end":{"row":65,"column":0},"action":"insert","lines":["import boto3","import json","import base64","import cgi","import io","","def lambda_handler(event, context):","    # Base64로 인코딩된 경우 디코딩","    if event.get('isBase64Encoded'):","        body = base64.b64decode(event['body'])","    else:","        body = event['body'].encode('utf-8')","    ","    # Content-Type 헤더에서 boundary 값을 포함하여 가져옴","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # environ를 구성하여 cgi.FieldStorage를 사용해 파싱","    environ = {","        'REQUEST_METHOD': 'POST',","        'CONTENT_TYPE': content_type,","        'CONTENT_LENGTH': str(len(body))","    }","    ","    # multipart/form-data 파싱","    form_data = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","    ","    # form_data 내용 확인","    print(\"form_data keys:\", list(form_data.keys()))  # form_data에 포함된 키들 출력","    for key in form_data.keys():","        item = form_data[key]","        print(f\"Key: {key}, Value: {item.value if item.filename is None else 'File data'}\")","        ","    # 이미지와 코멘트 추출","    image = form_data['image']","    comment = form_data['comment'].value","    ","    # metadata 구조 생성","    metadata = {","        \"comment\": comment,","        # 필요한 다른 메타데이터를 여기에 추가할 수 있습니다.","    }","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 비동기 호출","    lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='Event',  # 비동기 호출","        Payload=json.dumps({","            \"image\": image.file.read().decode('latin1'),  # 이미지 바이너리 데이터를 텍스트로 변환하여 전달","            \"metadata\": metadata","        })","    )","    ","    # 호출 후 즉시 성공적인 응답 반환","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function'","        })","    }",""]}],[{"start":{"row":0,"column":0},"end":{"row":64,"column":5},"action":"remove","lines":["import boto3","import json","import base64","import cgi","import io","","def lambda_handler(event, context):","    # Base64로 인코딩된 경우 디코딩","    if event.get('isBase64Encoded'):","        body = base64.b64decode(event['body'])","    else:","        body = event['body'].encode('utf-8')","    ","    # Content-Type 헤더에서 boundary 값을 포함하여 가져옴","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # environ를 구성하여 cgi.FieldStorage를 사용해 파싱","    environ = {","        'REQUEST_METHOD': 'POST',","        'CONTENT_TYPE': content_type,","        'CONTENT_LENGTH': str(len(body))","    }","    ","    # multipart/form-data 파싱","    form_data = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","    ","    # form_data 내용 확인","    print(\"form_data keys:\", list(form_data.keys()))  # form_data에 포함된 키들 출력","    for key in form_data.keys():","        item = form_data[key]","        print(f\"Key: {key}, Value: {item.value if item.filename is None else 'File data'}\")","        ","    # 이미지와 코멘트 추출","    image = form_data['image']","    comment = form_data['comment'].value","    ","    # metadata 구조 생성","    metadata = {","        \"comment\": comment,","        # 필요한 다른 메타데이터를 여기에 추가할 수 있습니다.","    }","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 비동기 호출","    lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='Event',  # 비동기 호출","        Payload=json.dumps({","            \"image\": image.file.read().decode('latin1'),  # 이미지 바이너리 데이터를 텍스트로 변환하여 전달","            \"metadata\": metadata","        })","    )","    ","    # 호출 후 즉시 성공적인 응답 반환","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function'","        })","    }"],"id":31}],[{"start":{"row":0,"column":0},"end":{"row":77,"column":0},"action":"insert","lines":["import boto3","import json","import base64","import cgi","import io","import uuid","","def lambda_handler(event, context):","    # S3 클라이언트 생성","    s3 = boto3.client('s3')","    s3_bucket_name = 'team2-images-bucket'","","    # Base64로 인코딩된 경우 디코딩","    if event.get('isBase64Encoded'):","        body = base64.b64decode(event['body'])","    else:","        body = event['body'].encode('utf-8')","    ","    # Content-Type 헤더에서 boundary 값을 포함하여 가져옴","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # environ를 구성하여 cgi.FieldStorage를 사용해 파싱","    environ = {","        'REQUEST_METHOD': 'POST',","        'CONTENT_TYPE': content_type,","        'CONTENT_LENGTH': str(len(body))","    }","    ","    # multipart/form-data 파싱","    form_data = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","    ","    # 이미지와 코멘트 추출","    image = form_data['image']","    comment = form_data['comment'].value","    ","    # metadata 구조 생성","    metadata = {","        \"comment\": comment,","    }","    ","    # 고유한 파일 이름 생성","    image_file_name = f\"{uuid.uuid4()}.jpg\"","    ","    # S3에 이미지 업로드","    s3.put_object(","        Bucket=s3_bucket_name,","        Key=image_file_name,","        Body=image.file.read(),","        ContentType='image/jpeg'","    )","    ","    # 업로드된 이미지의 S3 URL 생성","    s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","    ","    # Lambda 클라이언트 생성","    lambda_client = boto3.client('lambda')","    ","    # 호출할 Lambda 함수 이름","    target_lambda_function_name = 'team2-DB-management-lambda'  # 실제 다음 Lambda 함수 이름으로 변경","    ","    # 다른 Lambda 함수 비동기 호출","    lambda_client.invoke(","        FunctionName=target_lambda_function_name,","        InvocationType='Event',  # 비동기 호출","        Payload=json.dumps({","            \"image_s3_url\": s3_image_url,  # 이미지의 S3 URL을 전달","            \"metadata\": metadata","        })","    )","    ","    # 호출 후 즉시 성공적인 응답 반환","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Data successfully forwarded to the next Lambda function'","        })","    }",""],"id":32}]]},"ace":{"folds":[],"scrolltop":964.5,"scrollleft":0,"selection":{"start":{"row":78,"column":0},"end":{"row":78,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":46,"state":"start","mode":"ace/mode/python"}},"timestamp":1724134186782,"hash":"1dddc989879d7c611312a2a57b7087b5c940a8f6"}