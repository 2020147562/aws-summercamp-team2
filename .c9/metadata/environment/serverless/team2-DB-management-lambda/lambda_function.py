{"filter":false,"title":"lambda_function.py","tooltip":"/serverless/team2-DB-management-lambda/lambda_function.py","undoManager":{"mark":19,"position":19,"stack":[[{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["import boto3","import base64","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'your-s3-bucket-name'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'your-dynamodb-table-name'","    ","    # 전달받은 데이터 파싱","    image_data = event['body']['image']  # base64로 인코딩된 이미지 데이터","    metadata = event['body']['metadata']  # 기타 메타데이터(예: 텍스트 정보 등)","    ","    # 이미지 디코딩","    image_bytes = base64.b64decode(image_data)","    ","    # 고유한 이미지 파일 이름 생성","    image_file_name = f\"{uuid.uuid4()}.jpg\"","    ","    # S3에 이미지 업로드","    s3.put_object(","        Bucket=s3_bucket_name,","        Key=image_file_name,","        Body=image_bytes,","        ContentType='image/jpeg'","    )","    ","    # 업로드된 이미지의 S3 URL 생성","    s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","    ","    # 현재 시간","    timestamp = datetime.utcnow().isoformat()","    ","    # DynamoDB에 메타데이터 저장","    table = dynamodb.Table(dynamodb_table_name)","    table.put_item(","        Item={","            'id': str(uuid.uuid4()),  # 고유 ID","            'image_url': s3_image_url,","            'metadata': metadata,","            'uploaded_at': timestamp","        }","    )","    ","    # 성공적인 응답 반환","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Image uploaded and metadata stored successfully',","            'image_url': s3_image_url","        })","    }",""],"id":17}],[{"start":{"row":12,"column":40},"end":{"row":12,"column":41},"action":"remove","lines":["e"],"id":18},{"start":{"row":12,"column":39},"end":{"row":12,"column":40},"action":"remove","lines":["m"]},{"start":{"row":12,"column":38},"end":{"row":12,"column":39},"action":"remove","lines":["a"]},{"start":{"row":12,"column":37},"end":{"row":12,"column":38},"action":"remove","lines":["n"]},{"start":{"row":12,"column":36},"end":{"row":12,"column":37},"action":"remove","lines":["-"]},{"start":{"row":12,"column":35},"end":{"row":12,"column":36},"action":"remove","lines":["t"]},{"start":{"row":12,"column":34},"end":{"row":12,"column":35},"action":"remove","lines":["e"]},{"start":{"row":12,"column":33},"end":{"row":12,"column":34},"action":"remove","lines":["k"]},{"start":{"row":12,"column":32},"end":{"row":12,"column":33},"action":"remove","lines":["c"]},{"start":{"row":12,"column":31},"end":{"row":12,"column":32},"action":"remove","lines":["u"]},{"start":{"row":12,"column":30},"end":{"row":12,"column":31},"action":"remove","lines":["b"]},{"start":{"row":12,"column":29},"end":{"row":12,"column":30},"action":"remove","lines":["-"]},{"start":{"row":12,"column":28},"end":{"row":12,"column":29},"action":"remove","lines":["3"]},{"start":{"row":12,"column":27},"end":{"row":12,"column":28},"action":"remove","lines":["s"]},{"start":{"row":12,"column":26},"end":{"row":12,"column":27},"action":"remove","lines":["-"]},{"start":{"row":12,"column":25},"end":{"row":12,"column":26},"action":"remove","lines":["r"]},{"start":{"row":12,"column":24},"end":{"row":12,"column":25},"action":"remove","lines":["u"]},{"start":{"row":12,"column":23},"end":{"row":12,"column":24},"action":"remove","lines":["o"]},{"start":{"row":12,"column":22},"end":{"row":12,"column":23},"action":"remove","lines":["y"]}],[{"start":{"row":12,"column":22},"end":{"row":12,"column":41},"action":"insert","lines":["team2-images-bucket"],"id":19}],[{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"remove","lines":["import boto3","import base64","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'team2-images-bucket'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'your-dynamodb-table-name'","    ","    # 전달받은 데이터 파싱","    image_data = event['body']['image']  # base64로 인코딩된 이미지 데이터","    metadata = event['body']['metadata']  # 기타 메타데이터(예: 텍스트 정보 등)","    ","    # 이미지 디코딩","    image_bytes = base64.b64decode(image_data)","    ","    # 고유한 이미지 파일 이름 생성","    image_file_name = f\"{uuid.uuid4()}.jpg\"","    ","    # S3에 이미지 업로드","    s3.put_object(","        Bucket=s3_bucket_name,","        Key=image_file_name,","        Body=image_bytes,","        ContentType='image/jpeg'","    )","    ","    # 업로드된 이미지의 S3 URL 생성","    s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","    ","    # 현재 시간","    timestamp = datetime.utcnow().isoformat()","    ","    # DynamoDB에 메타데이터 저장","    table = dynamodb.Table(dynamodb_table_name)","    table.put_item(","        Item={","            'id': str(uuid.uuid4()),  # 고유 ID","            'image_url': s3_image_url,","            'metadata': metadata,","            'uploaded_at': timestamp","        }","    )","    ","    # 성공적인 응답 반환","    return {","        'statusCode': 200,","        'body': json.dumps({","            'message': 'Image uploaded and metadata stored successfully',","            'image_url': s3_image_url","        })","    }",""],"id":20},{"start":{"row":0,"column":0},"end":{"row":87,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","import cgi","import io","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'team2-images-bucket'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'your-dynamodb-table-name'","    ","    # Content-Type 헤더를 추출","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # 멀티파트 데이터 파싱","    if content_type and content_type.startswith('multipart/form-data'):","        body = event['body']","        if event['isBase64Encoded']:","            body = base64.b64decode(body)","        ","        environ = {","            'REQUEST_METHOD': 'POST',","            'CONTENT_TYPE': content_type,","            'CONTENT_LENGTH': str(len(body))","        }","        ","        fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","        ","        # 이미지 파일과 메타데이터 추출","        photo = fs['photo']","        comment = fs['comment'].value","        ","        if photo.filename:","            image_bytes = photo.file.read()","            # 고유한 이미지 파일 이름 생성","            image_file_name = f\"{uuid.uuid4()}.jpg\"","            ","            # S3에 이미지 업로드","            s3.put_object(","                Bucket=s3_bucket_name,","                Key=image_file_name,","                Body=image_bytes,","                ContentType=photo.type","            )","            ","            # 업로드된 이미지의 S3 URL 생성","            s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","            ","            # 현재 시간","            timestamp = datetime.utcnow().isoformat()","            ","            # DynamoDB에 메타데이터 저장","            table = dynamodb.Table(dynamodb_table_name)","            table.put_item(","                Item={","                    'id': str(uuid.uuid4()),  # 고유 ID","                    'image_url': s3_image_url,","                    'comment': comment,","                    'uploaded_at': timestamp","                }","            )","            ","            # 성공적인 응답 반환","            return {","                'statusCode': 200,","                'body': json.dumps({","                    'message': 'Image uploaded and metadata stored successfully',","                    'image_url': s3_image_url","                })","            }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image file uploaded'})","            }","    else:","        return {","            'statusCode': 400,","            'body': json.dumps({'message': 'Invalid content type'})","        }",""]}],[{"start":{"row":4,"column":9},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":21},{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"insert","lines":["ㅑ"]},{"start":{"row":5,"column":1},"end":{"row":5,"column":2},"action":"insert","lines":["ㅡ"]},{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"insert","lines":["ㅔ"]}],[{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"remove","lines":["ㅔ"],"id":22},{"start":{"row":5,"column":1},"end":{"row":5,"column":2},"action":"remove","lines":["ㅡ"]},{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["ㅑ"]}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":1},"action":"insert","lines":["i"],"id":23},{"start":{"row":5,"column":1},"end":{"row":5,"column":2},"action":"insert","lines":["m"]},{"start":{"row":5,"column":2},"end":{"row":5,"column":3},"action":"insert","lines":["p"]},{"start":{"row":5,"column":3},"end":{"row":5,"column":4},"action":"insert","lines":["o"]},{"start":{"row":5,"column":4},"end":{"row":5,"column":5},"action":"insert","lines":["r"]},{"start":{"row":5,"column":5},"end":{"row":5,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":5,"column":6},"end":{"row":5,"column":7},"action":"insert","lines":[" "],"id":24},{"start":{"row":5,"column":7},"end":{"row":5,"column":8},"action":"insert","lines":["b"]},{"start":{"row":5,"column":8},"end":{"row":5,"column":9},"action":"insert","lines":["a"]},{"start":{"row":5,"column":9},"end":{"row":5,"column":10},"action":"insert","lines":["s"]},{"start":{"row":5,"column":10},"end":{"row":5,"column":11},"action":"insert","lines":["e"]},{"start":{"row":5,"column":11},"end":{"row":5,"column":12},"action":"insert","lines":["6"]},{"start":{"row":5,"column":12},"end":{"row":5,"column":13},"action":"insert","lines":["4"]}],[{"start":{"row":17,"column":28},"end":{"row":17,"column":51},"action":"remove","lines":["our-dynamodb-table-name"],"id":25},{"start":{"row":17,"column":27},"end":{"row":17,"column":28},"action":"remove","lines":["y"]}],[{"start":{"row":17,"column":27},"end":{"row":18,"column":26},"action":"insert","lines":["","team2-image-metadata-table"],"id":26}],[{"start":{"row":17,"column":27},"end":{"row":18,"column":0},"action":"remove","lines":["",""],"id":27}],[{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'team2-images-bucket'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'team2-image-metadata-table'","    ","    # Content-Type 헤더를 추출","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # 멀티파트 데이터 파싱","    if content_type and content_type.startswith('multipart/form-data'):","        body = event['body']","        if event['isBase64Encoded']:","            body = base64.b64decode(body)","        ","        environ = {","            'REQUEST_METHOD': 'POST',","            'CONTENT_TYPE': content_type,","            'CONTENT_LENGTH': str(len(body))","        }","        ","        fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","        ","        # 이미지 파일과 메타데이터 추출","        photo = fs['photo']","        comment = fs['comment'].value","        ","        if photo.filename:","            image_bytes = photo.file.read()","            # 고유한 이미지 파일 이름 생성","            image_file_name = f\"{uuid.uuid4()}.jpg\"","            ","            # S3에 이미지 업로드","            s3.put_object(","                Bucket=s3_bucket_name,","                Key=image_file_name,","                Body=image_bytes,","                ContentType=photo.type","            )","            ","            # 업로드된 이미지의 S3 URL 생성","            s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","            ","            # 현재 시간","            timestamp = datetime.utcnow().isoformat()","            ","            # DynamoDB에 메타데이터 저장","            table = dynamodb.Table(dynamodb_table_name)","            table.put_item(","                Item={","                    'id': str(uuid.uuid4()),  # 고유 ID","                    'image_url': s3_image_url,","                    'comment': comment,","                    'uploaded_at': timestamp","                }","            )","            ","            # 성공적인 응답 반환","            return {","                'statusCode': 200,","                'body': json.dumps({","                    'message': 'Image uploaded and metadata stored successfully',","                    'image_url': s3_image_url","                })","            }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image file uploaded'})","            }","    else:","        return {","            'statusCode': 400,","            'body': json.dumps({'message': 'Invalid content type'})","        }",""],"id":28},{"start":{"row":0,"column":0},"end":{"row":92,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'team2-images-bucket'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'team2-image-metadata-table'","    ","    # Content-Type 헤더를 추출","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # 멀티파트 데이터 파싱","    if content_type and content_type.startswith('multipart/form-data'):","        body = event['body']","        if event['isBase64Encoded']:","            body = base64.b64decode(body)","        ","        environ = {","            'REQUEST_METHOD': 'POST',","            'CONTENT_TYPE': content_type,","            'CONTENT_LENGTH': str(len(body))","        }","        ","        fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","        ","        # 이미지 파일과 메타데이터 추출","        photo = fs['image']","        metadata_json = fs['metadata'].value","        ","        # 메타데이터를 파싱하여 딕셔너리로 변환","        metadata = json.loads(metadata_json)","        comment = metadata.get('comment', '')","        ","        if photo.filename:","            image_bytes = photo.file.read()","            # 고유한 이미지 파일 이름 생성","            image_file_name = f\"{uuid.uuid4()}.jpg\"","            ","            # S3에 이미지 업로드","            s3.put_object(","                Bucket=s3_bucket_name,","                Key=image_file_name,","                Body=image_bytes,","                ContentType=photo.type","            )","            ","            # 업로드된 이미지의 S3 URL 생성","            s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","            ","            # 현재 시간","            timestamp = datetime.utcnow().isoformat()","            ","            # DynamoDB에 메타데이터 저장","            table = dynamodb.Table(dynamodb_table_name)","            table.put_item(","                Item={","                    'id': str(uuid.uuid4()),  # 고유 ID","                    'image_url': s3_image_url,","                    'metadata': metadata,","                    'uploaded_at': timestamp","                }","            )","            ","            # 성공적인 응답 반환","            return {","                'statusCode': 200,","                'body': json.dumps({","                    'message': 'Image uploaded and metadata stored successfully',","                    'image_url': s3_image_url","                })","            }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image file uploaded'})","            }","    else:","        return {","            'statusCode': 400,","            'body': json.dumps({'message': 'Invalid content type'})","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    # S3와 DynamoDB 클라이언트 생성","    s3 = boto3.client('s3')","    dynamodb = boto3.resource('dynamodb')","    ","    # S3 버킷 이름","    s3_bucket_name = 'team2-images-bucket'","    ","    # DynamoDB 테이블 이름","    dynamodb_table_name = 'team2-image-metadata-table'","    ","    # Content-Type 헤더를 추출","    content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","    ","    # 멀티파트 데이터 파싱","    if content_type and content_type.startswith('multipart/form-data'):","        body = event['body']","        if event['isBase64Encoded']:","            body = base64.b64decode(body)","        ","        environ = {","            'REQUEST_METHOD': 'POST',","            'CONTENT_TYPE': content_type,","            'CONTENT_LENGTH': str(len(body))","        }","        ","        fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","        ","        # 이미지 파일과 메타데이터 추출","        photo = fs['image']","        metadata_json = fs['metadata'].value","        ","        # 메타데이터를 파싱하여 딕셔너리로 변환","        metadata = json.loads(metadata_json)","        comment = metadata.get('comment', '')","        ","        if photo.filename:","            image_bytes = photo.file.read()","            # 고유한 이미지 파일 이름 생성","            image_file_name = f\"{uuid.uuid4()}.jpg\"","            ","            # S3에 이미지 업로드","            s3.put_object(","                Bucket=s3_bucket_name,","                Key=image_file_name,","                Body=image_bytes,","                ContentType=photo.type","            )","            ","            # 업로드된 이미지의 S3 URL 생성","            s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","            ","            # 현재 시간","            timestamp = datetime.utcnow().isoformat()","            ","            # DynamoDB에 메타데이터 저장","            table = dynamodb.Table(dynamodb_table_name)","            table.put_item(","                Item={","                    'id': str(uuid.uuid4()),  # 고유 ID","                    'image_url': s3_image_url,","                    'metadata': metadata,","                    'uploaded_at': timestamp","                }","            )","            ","            # 성공적인 응답 반환","            return {","                'statusCode': 200,","                'body': json.dumps({","                    'message': 'Image uploaded and metadata stored successfully',","                    'image_url': s3_image_url","                })","            }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image file uploaded'})","            }","    else:","        return {","            'statusCode': 400,","            'body': json.dumps({'message': 'Invalid content type'})","        }",""],"id":29},{"start":{"row":0,"column":0},"end":{"row":100,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # S3와 DynamoDB 클라이언트 생성","        s3 = boto3.client('s3')","        dynamodb = boto3.resource('dynamodb')","        ","        # S3 버킷 이름","        s3_bucket_name = 'team2-images-bucket'","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # Content-Type 헤더를 추출","        content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","        ","        # 멀티파트 데이터 파싱","        if content_type and content_type.startswith('multipart/form-data'):","            body = event['body']","            if event['isBase64Encoded']:","                body = base64.b64decode(body)","            ","            environ = {","                'REQUEST_METHOD': 'POST',","                'CONTENT_TYPE': content_type,","                'CONTENT_LENGTH': str(len(body))","            }","            ","            fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","            ","            # 이미지 파일과 메타데이터 추출","            photo = fs['image']","            metadata_json = fs['metadata'].value","            ","            # 메타데이터를 파싱하여 딕셔너리로 변환","            metadata = json.loads(metadata_json)","            comment = metadata.get('comment', '')","            ","            if photo.filename:","                image_bytes = photo.file.read()","                # 고유한 이미지 파일 이름 생성","                image_file_name = f\"{uuid.uuid4()}.jpg\"","                ","                # S3에 이미지 업로드","                s3.put_object(","                    Bucket=s3_bucket_name,","                    Key=image_file_name,","                    Body=image_bytes,","                    ContentType='image/jpeg'  # 또는 photo.type을 사용할 수 있음","                )","                ","                # 업로드된 이미지의 S3 URL 생성","                s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","                ","                # 현재 시간","                timestamp = datetime.utcnow().isoformat()","                ","                # DynamoDB에 메타데이터 저장","                table = dynamodb.Table(dynamodb_table_name)","                table.put_item(","                    Item={","                        'id': str(uuid.uuid4()),  # 고유 ID","                        'image_url': s3_image_url,","                        'metadata': metadata,","                        'uploaded_at': timestamp","                    }","                )","                ","                # 성공적인 응답 반환","                return {","                    'statusCode': 200,","                    'body': json.dumps({","                        'message': 'Image uploaded and metadata stored successfully',","                        'image_url': s3_image_url","                    })","                }","            else:","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'No image file uploaded'})","                }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid content type'})","            }","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":100,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # S3와 DynamoDB 클라이언트 생성","        s3 = boto3.client('s3')","        dynamodb = boto3.resource('dynamodb')","        ","        # S3 버킷 이름","        s3_bucket_name = 'team2-images-bucket'","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # Content-Type 헤더를 추출","        content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","        ","        # 멀티파트 데이터 파싱","        if content_type and content_type.startswith('multipart/form-data'):","            body = event['body']","            if event['isBase64Encoded']:","                body = base64.b64decode(body)","            ","            environ = {","                'REQUEST_METHOD': 'POST',","                'CONTENT_TYPE': content_type,","                'CONTENT_LENGTH': str(len(body))","            }","            ","            fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","            ","            # 이미지 파일과 메타데이터 추출","            photo = fs['image']","            metadata_json = fs['metadata'].value","            ","            # 메타데이터를 파싱하여 딕셔너리로 변환","            metadata = json.loads(metadata_json)","            comment = metadata.get('comment', '')","            ","            if photo.filename:","                image_bytes = photo.file.read()","                # 고유한 이미지 파일 이름 생성","                image_file_name = f\"{uuid.uuid4()}.jpg\"","                ","                # S3에 이미지 업로드","                s3.put_object(","                    Bucket=s3_bucket_name,","                    Key=image_file_name,","                    Body=image_bytes,","                    ContentType='image/jpeg'  # 또는 photo.type을 사용할 수 있음","                )","                ","                # 업로드된 이미지의 S3 URL 생성","                s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","                ","                # 현재 시간","                timestamp = datetime.utcnow().isoformat()","                ","                # DynamoDB에 메타데이터 저장","                table = dynamodb.Table(dynamodb_table_name)","                table.put_item(","                    Item={","                        'id': str(uuid.uuid4()),  # 고유 ID","                        'image_url': s3_image_url,","                        'metadata': metadata,","                        'uploaded_at': timestamp","                    }","                )","                ","                # 성공적인 응답 반환","                return {","                    'statusCode': 200,","                    'body': json.dumps({","                        'message': 'Image uploaded and metadata stored successfully',","                        'image_url': s3_image_url","                    })","                }","            else:","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'No image file uploaded'})","                }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid content type'})","            }","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""],"id":30},{"start":{"row":0,"column":0},"end":{"row":101,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # S3와 DynamoDB 클라이언트 생성","        s3 = boto3.client('s3')","        dynamodb = boto3.resource('dynamodb')","        ","        # S3 버킷 이름","        s3_bucket_name = 'team2-images-bucket'","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # Content-Type 헤더를 추출","        content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","        ","        # 멀티파트 데이터 파싱","        if content_type and content_type.startswith('multipart/form-data'):","            body = event['body']","            if event['isBase64Encoded']:","                body = base64.b64decode(body)","            ","            environ = {","                'REQUEST_METHOD': 'POST',","                'CONTENT_TYPE': content_type,","                'CONTENT_LENGTH': str(len(body))","            }","            ","            fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","            ","            # 이미지 파일과 메타데이터 추출","            photo = fs['image']","            metadata_json = fs['metadata'].value","            ","            # 메타데이터를 파싱하여 딕셔너리로 변환","            metadata = json.loads(metadata_json)","            comment = metadata.get('comment', '')","            ","            if photo.filename:","                image_bytes = photo.file.read()","                # 고유한 이미지 파일 이름 생성","                image_file_name = f\"{uuid.uuid4()}.jpg\"","                ","                # S3에 이미지 업로드","                s3.put_object(","                    Bucket=s3_bucket_name,","                    Key=image_file_name,","                    Body=image_bytes,","                    ContentType='image/jpeg'  # 또는 photo.type을 사용할 수 있음","                )","                ","                # 업로드된 이미지의 S3 URL 생성","                s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","                ","                # 현재 시간","                timestamp = datetime.utcnow().isoformat()","                ","                # DynamoDB에 메타데이터 저장","                table = dynamodb.Table(dynamodb_table_name)","                table.put_item(","                    Item={","                        'id': str(uuid.uuid4()),  # 고유 ID","                        'image_url': s3_image_url,","                        'metadata': metadata,","                        'uploaded_at': timestamp","                    }","                )","                ","                # 성공적인 응답 반환","                return {","                    'statusCode': 200,","                    'body': json.dumps({","                        'message': 'Image uploaded and metadata stored successfully',","                        'image_url': s3_image_url","                    })","                }","            else:","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'No image file uploaded'})","                }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid content type'})","            }","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }","",""]}],[{"start":{"row":0,"column":0},"end":{"row":101,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","import cgi","import io","import base64","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # S3와 DynamoDB 클라이언트 생성","        s3 = boto3.client('s3')","        dynamodb = boto3.resource('dynamodb')","        ","        # S3 버킷 이름","        s3_bucket_name = 'team2-images-bucket'","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # Content-Type 헤더를 추출","        content_type = event['headers'].get('Content-Type') or event['headers'].get('content-type')","        ","        # 멀티파트 데이터 파싱","        if content_type and content_type.startswith('multipart/form-data'):","            body = event['body']","            if event['isBase64Encoded']:","                body = base64.b64decode(body)","            ","            environ = {","                'REQUEST_METHOD': 'POST',","                'CONTENT_TYPE': content_type,","                'CONTENT_LENGTH': str(len(body))","            }","            ","            fs = cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True)","            ","            # 이미지 파일과 메타데이터 추출","            photo = fs['image']","            metadata_json = fs['metadata'].value","            ","            # 메타데이터를 파싱하여 딕셔너리로 변환","            metadata = json.loads(metadata_json)","            comment = metadata.get('comment', '')","            ","            if photo.filename:","                image_bytes = photo.file.read()","                # 고유한 이미지 파일 이름 생성","                image_file_name = f\"{uuid.uuid4()}.jpg\"","                ","                # S3에 이미지 업로드","                s3.put_object(","                    Bucket=s3_bucket_name,","                    Key=image_file_name,","                    Body=image_bytes,","                    ContentType='image/jpeg'  # 또는 photo.type을 사용할 수 있음","                )","                ","                # 업로드된 이미지의 S3 URL 생성","                s3_image_url = f\"https://{s3_bucket_name}.s3.amazonaws.com/{image_file_name}\"","                ","                # 현재 시간","                timestamp = datetime.utcnow().isoformat()","                ","                # DynamoDB에 메타데이터 저장","                table = dynamodb.Table(dynamodb_table_name)","                table.put_item(","                    Item={","                        'id': str(uuid.uuid4()),  # 고유 ID","                        'image_url': s3_image_url,","                        'metadata': metadata,","                        'uploaded_at': timestamp","                    }","                )","                ","                # 성공적인 응답 반환","                return {","                    'statusCode': 200,","                    'body': json.dumps({","                        'message': 'Image uploaded and metadata stored successfully',","                        'image_url': s3_image_url","                    })","                }","            else:","                return {","                    'statusCode': 400,","                    'body': json.dumps({'message': 'No image file uploaded'})","                }","        else:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'Invalid content type'})","            }","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }","",""],"id":31}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":9},"action":"insert","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: comment 필드 추출)","        comment = metadata.get('comment', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(","            Item={","                'report_id': report_id,  # 숫자(Number) 타입으로 저장","                'image_url': image_s3_url,","                'metadata': metadata,","                'uploaded_at': timestamp","            }","        )","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }"],"id":32}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":9},"action":"remove","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: comment 필드 추출)","        comment = metadata.get('comment', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(","            Item={","                'report_id': report_id,  # 숫자(Number) 타입으로 저장","                'image_url': image_s3_url,","                'metadata': metadata,","                'uploaded_at': timestamp","            }","        )","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }"],"id":33},{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: comment 필드 추출)","        comment = metadata.get('comment', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(","            Item={","                'report_id': report_id,  # 숫자(Number) 타입으로 저장","                'image_url': image_s3_url,","                'metadata': metadata,","                'uploaded_at': timestamp","            }","        )","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # Lambda 클라이언트 생성","        lambda_client = boto3.client('lambda')","        ","        # Slack 메시지 전송을 위해 team2-slack-message-lambda 호출","        slack_payload = {","            'report_id': report_id,","            'image_url': image_s3_url,","            'metadata': metadata,","            'timestamp': timestamp","        }","        ","        response = lambda_client.invoke(","            FunctionName='team2-slack-message-lambda',  # 실제 Lambda 함수 이름으로 변경","            InvocationType='Event',  # 비동기 호출","            Payload=json.dumps(slack_payload)","        )","        ","        # Lambda 호출 결과 로그 남기기","        print(f\"Invoked team2-slack-message-lambda with response: {response}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully and Slack notification sent',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: comment 필드 추출)","        comment = metadata.get('comment', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(","            Item={","                'report_id': report_id,  # 숫자(Number) 타입으로 저장","                'image_url': image_s3_url,","                'metadata': metadata,","                'uploaded_at': timestamp","            }","        )","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # Lambda 클라이언트 생성","        lambda_client = boto3.client('lambda')","        ","        # Slack 메시지 전송을 위해 team2-slack-message-lambda 호출","        slack_payload = {","            'report_id': report_id,","            'image_url': image_s3_url,","            'metadata': metadata,","            'timestamp': timestamp","        }","        ","        response = lambda_client.invoke(","            FunctionName='team2-slack-message-lambda',  # 실제 Lambda 함수 이름으로 변경","            InvocationType='Event',  # 비동기 호출","            Payload=json.dumps(slack_payload)","        )","        ","        # Lambda 호출 결과 로그 남기기","        print(f\"Invoked team2-slack-message-lambda with response: {response}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully and Slack notification sent',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""],"id":34},{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: comment 필드 추출)","        comment = metadata.get('comment', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 저장할 데이터 구성","        item_to_store = {","            'report_id': report_id,  # 숫자(Number) 타입으로 저장","            'image_url': image_s3_url,","            'metadata': metadata,","            'uploaded_at': timestamp","        }","        ","        # CloudWatch 로그에 DynamoDB에 저장할 데이터 출력","        print(\"Storing the following item in DynamoDB:\")","        print(json.dumps(item_to_store, indent=2))","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(Item=item_to_store)","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # Lambda 클라이언트 생성","        lambda_client = boto3.client('lambda')","        ","        # Slack 메시지 전송을 위해 team2-slack-message-lambda 호출","        slack_payload = {","            'report_id': report_id,","            'image_url': image_s3_url,","            'metadata': metadata,","            'timestamp': timestamp","        }","        ","        # CloudWatch 로그에 Slack에 전송할 데이터 출력","        print(\"Sending the following payload to Slack Lambda:\")","        print(json.dumps(slack_payload, indent=2))","        ","        response = lambda_client.invoke(","            FunctionName='team2-slack-message-lambda',  # 실제 Lambda 함수 이름으로 변경","            InvocationType='Event',  # 비동기 호출","            Payload=json.dumps(slack_payload)","        )","        ","        # Lambda 호출 결과 로그 남기기","        print(f\"Invoked team2-slack-message-lambda with response: {response}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully and Slack notification sent',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""]}],[{"start":{"row":23,"column":28},"end":{"row":23,"column":35},"action":"remove","lines":["comment"],"id":35},{"start":{"row":23,"column":28},"end":{"row":23,"column":36},"action":"insert","lines":["location"]},{"start":{"row":24,"column":8},"end":{"row":24,"column":15},"action":"remove","lines":["comment"]},{"start":{"row":24,"column":8},"end":{"row":24,"column":16},"action":"insert","lines":["location"]},{"start":{"row":24,"column":33},"end":{"row":24,"column":40},"action":"remove","lines":["comment"]},{"start":{"row":24,"column":33},"end":{"row":24,"column":41},"action":"insert","lines":["location"]}],[{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"remove","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: location 필드 추출)","        location = metadata.get('location', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 저장할 데이터 구성","        item_to_store = {","            'report_id': report_id,  # 숫자(Number) 타입으로 저장","            'image_url': image_s3_url,","            'metadata': metadata,","            'uploaded_at': timestamp","        }","        ","        # CloudWatch 로그에 DynamoDB에 저장할 데이터 출력","        print(\"Storing the following item in DynamoDB:\")","        print(json.dumps(item_to_store, indent=2))","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(Item=item_to_store)","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # Lambda 클라이언트 생성","        lambda_client = boto3.client('lambda')","        ","        # Slack 메시지 전송을 위해 team2-slack-message-lambda 호출","        slack_payload = {","            'report_id': report_id,","            'image_url': image_s3_url,","            'metadata': metadata,","            'timestamp': timestamp","        }","        ","        # CloudWatch 로그에 Slack에 전송할 데이터 출력","        print(\"Sending the following payload to Slack Lambda:\")","        print(json.dumps(slack_payload, indent=2))","        ","        response = lambda_client.invoke(","            FunctionName='team2-slack-message-lambda',  # 실제 Lambda 함수 이름으로 변경","            InvocationType='Event',  # 비동기 호출","            Payload=json.dumps(slack_payload)","        )","        ","        # Lambda 호출 결과 로그 남기기","        print(f\"Invoked team2-slack-message-lambda with response: {response}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully and Slack notification sent',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""],"id":36},{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"insert","lines":["import boto3","import uuid","import json","from datetime import datetime","","def lambda_handler(event, context):","    try:","        # DynamoDB 클라이언트 생성","        dynamodb = boto3.resource('dynamodb')","        ","        # DynamoDB 테이블 이름","        dynamodb_table_name = 'team2-image-metadata-table'","        ","        # event로부터 이미지 URL과 메타데이터 추출","        image_s3_url = event.get('image_s3_url')","        metadata = event.get('metadata', {})","        ","        if not image_s3_url:","            return {","                'statusCode': 400,","                'body': json.dumps({'message': 'No image URL provided'})","            }","        ","        # 추가적인 메타데이터 처리 (예: location 필드 추출)","        location = metadata.get('location', '')","        ","        # 현재 시간","        timestamp = datetime.utcnow().isoformat()","        ","        # 고유 ID 생성 (숫자 타입으로)","        report_id = int(uuid.uuid4().int >> 64)  # UUID의 상위 64비트를 사용하여 숫자 생성","        ","        # DynamoDB에 저장할 데이터 구성","        item_to_store = {","            'report_id': report_id,  # 숫자(Number) 타입으로 저장","            'image_url': image_s3_url,","            'metadata': metadata,","            'uploaded_at': timestamp","        }","        ","        # CloudWatch 로그에 DynamoDB에 저장할 데이터 출력","        print(\"Storing the following item in DynamoDB:\")","        print(json.dumps(item_to_store, indent=2))","        ","        # DynamoDB에 메타데이터 저장","        table = dynamodb.Table(dynamodb_table_name)","        table.put_item(Item=item_to_store)","        ","        # 성공적인 저장 로그 남기기","        print(f\"Successfully stored metadata in DynamoDB with report_id: {report_id}\")","        ","        # Lambda 클라이언트 생성","        lambda_client = boto3.client('lambda')","        ","        # Slack 메시지 전송을 위해 team2-slack-message-lambda 호출","        slack_payload = {","            'report_id': report_id,","            'image_url': image_s3_url,","            'metadata': metadata,","            'timestamp': timestamp","        }","        ","        # CloudWatch 로그에 Slack에 전송할 데이터 출력","        print(\"Sending the following payload to Slack Lambda:\")","        print(json.dumps(slack_payload, indent=2))","        ","        response = lambda_client.invoke(","            FunctionName='team2-slack-message-lambda',  # 실제 Lambda 함수 이름으로 변경","            InvocationType='Event',  # 비동기 호출","            Payload=json.dumps(slack_payload)","        )","        ","        # Lambda 호출 결과 로그 남기기","        print(f\"Invoked team2-slack-message-lambda with response: {response}\")","        ","        # 성공적인 응답 반환","        return {","            'statusCode': 200,","            'body': json.dumps({","                'message': 'Image metadata stored successfully and Slack notification sent',","                'image_url': image_s3_url","            })","        }","        ","    except Exception as e:","        # 에러 발생 시 로그 남기기","        print(f\"Error occurred: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'An error occurred', 'error': str(e)})","        }",""]}]]},"ace":{"folds":[],"scrolltop":944,"scrollleft":0,"selection":{"start":{"row":91,"column":0},"end":{"row":91,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":140,"mode":"ace/mode/python"}},"timestamp":1724548108168,"hash":"e138db325131762dd15bd604b2a740c6f1696af0"}